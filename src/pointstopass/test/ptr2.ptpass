*** Andersen points-to analysis for function define internal i64 @doubleDeref(i64 %r) {
entry:
  %r1 = alloca i64, align 8
  store i64 %r, i64* %r1, align 4
  %r2 = load i64, i64* %r1, align 4
  %ptrIntVal = inttoptr i64 %r2 to i64*
  %valueAt = load i64, i64* %ptrIntVal, align 4
  %ptrIntVal3 = inttoptr i64 %valueAt to i64*
  %valueAt4 = load i64, i64* %ptrIntVal3, align 4
  ret i64 %valueAt4
}
 ***
  %valueAt = load i64, i64* %ptrIntVal, align 4 = {}
  %ptrIntVal = inttoptr i64 %r2 to i64* = {}
  %ptrIntVal3 = inttoptr i64 %valueAt to i64* = {}
  %valueAt4 = load i64, i64* %ptrIntVal3, align 4 = {}
i64 %r = {}
  %r1 = alloca i64, align 8 = {[r1], }
  %r2 = load i64, i64* %r1, align 4 = {}
[  %r1 = alloca i64, align 8] = {}
*** Andersen points-to analysis for function define i64 @_tip_main() {
entry:
  %q = alloca i64, align 8
  %p = alloca i64, align 8
  %n = alloca i64, align 8
  store i64 0, i64* %n, align 4
  store i64 0, i64* %p, align 4
  store i64 0, i64* %q, align 4
  store i64 17, i64* %n, align 4
  %addrOfPtr = ptrtoint i64* %n to i64
  store i64 %addrOfPtr, i64* %p, align 4
  %addrOfPtr1 = ptrtoint i64* %p to i64
  store i64 %addrOfPtr1, i64* %q, align 4
  %genfptr = load i64 ()*, i64 ()** getelementptr inbounds ([2 x i64 ()*], [2 x i64 ()*]* @_tip_ftable, i64 0, i64 0), align 8
  %castfptr = bitcast i64 ()* %genfptr to i64 (i64)*
  %q2 = load i64, i64* %q, align 4
  %calltmp = call i64 %castfptr(i64 %q2)
  ret i64 %calltmp
}
 ***
  %valueAt = load i64, i64* %ptrIntVal, align 4 = {}
  %n = alloca i64, align 8 = {[n], }
  %ptrIntVal = inttoptr i64 %r2 to i64* = {}
  %ptrIntVal3 = inttoptr i64 %valueAt to i64* = {}
  %p = alloca i64, align 8 = {[p], }
  %q = alloca i64, align 8 = {[q], }
  %valueAt4 = load i64, i64* %ptrIntVal3, align 4 = {}
  %addrOfPtr1 = ptrtoint i64* %p to i64 = {[p], }
  %q2 = load i64, i64* %q, align 4 = {[p], }
  %castfptr = bitcast i64 ()* %genfptr to i64 (i64)* = {}
  %genfptr = load i64 ()*, i64 ()** getelementptr inbounds ([2 x i64 ()*], [2 x i64 ()*]* @_tip_ftable, i64 0, i64 0), align 8 = {}
i64 %r = {}
  %r1 = alloca i64, align 8 = {[r1], }
  %calltmp = call i64 %castfptr(i64 %q2) = {}
  %r2 = load i64, i64* %r1, align 4 = {}
  %addrOfPtr = ptrtoint i64* %n to i64 = {[n], }
[  %n = alloca i64, align 8] = {}
[  %p = alloca i64, align 8] = {[n], }
[  %q = alloca i64, align 8] = {[p], }
[  %r1 = alloca i64, align 8] = {}
